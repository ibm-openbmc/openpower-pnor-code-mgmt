#!/bin/sh

update_symlinks() {
  PNOR_ACTIVE_PATH="/var/lib/phosphor-software-manager/pnor/"
  PNOR_RO_ACTIVE_PATH="/var/lib/phosphor-software-manager/pnor/ro"
  PNOR_RO_PREFIX="/media/pnor-ro-"
  PNOR_RW_ACTIVE_PATH="/var/lib/phosphor-software-manager/pnor/rw"
  PNOR_RW_PREFIX="/media/pnor-rw-"
  PNOR_PRSV_ACTIVE_PATH="/var/lib/phosphor-software-manager/pnor/prsv"
  PNOR_PRSV="/media/pnor-prsv"
  PNOR_RO_COMBINED_PATH="/usr/share/host-fw"
  PNOR_RW_COMBINED_PATH="/var/lib/host-fw/rw-"
  PNOR_PRSV_COMBINED_PATH="/var/lib/host-fw/prsv"
  PNOR_RO_MMC_PATH="/host-fw/ro"
  PNOR_RW_MMC_PATH="/host-fw/rw"
  PNOR_PRSV_MMC_PATH="/host-fw/prsv"
  PERSISTENCE_PATH="/var/lib/obmc/openpower-pnor-code-mgmt/"
  PNOR_PATCH_LOCATION="/usr/local/share/pnor/"

  # Get a list of all active PNOR versions
  data="$(ls -d ${PNOR_RO_PREFIX}*)"
  IFS=$'\n'  array=(${data})

  currentVersion=""
  lowestPriority=255
  for element in ${array[@]}; do
    #Remove the PNOR_RO_PREFIX from the path to get version ID.
    versionId="${element#${PNOR_RO_PREFIX}}"

    # Get the priority of active versions from persistence files.
    if [[ -f "${PERSISTENCE_PATH}${versionId}" ]]; then
      data="$(grep -r "priority" ${PERSISTENCE_PATH}${versionId})"
      priority="${data: -1}"
      if [[ priority -le lowestPriority  ]]; then
        lowestPriority=${priority}
        currentVersion=${versionId}
      fi
    fi
  done

  if [ ! -z $currentVersion ]; then
      # Use active version
      roTarget="${PNOR_RO_PREFIX}${currentVersion}"
      rwTarget="${PNOR_RW_PREFIX}${currentVersion}"
      prsvTarget="${PNOR_PRSV}"

  elif [ -d "${PNOR_RO_MMC_PATH}" ]; then
      # Use MMC
      roTarget="${PNOR_RO_MMC_PATH}"
      rwTarget="${PNOR_RW_MMC_PATH}"
      prsvTarget="${PNOR_PRSV_MMC_PATH}"

  elif [ -d "${PNOR_RO_COMBINED_PATH}" ]; then
      # Use combined image

      # Create a new rw dir if the code was updated, remove all other rw dirs
      # since dual version support is not yet supported. Also remove the patch
      # directories.
      rwId=$(ls -d "${PNOR_RW_COMBINED_PATH}"*)
      rwId=${rwId##*-}
      # Use the Master Lid List (81e002ff.lid) to calculate the id, it lists the
      # lids in the image and their CRCs similar to a table of contents.
      id=$(sha256sum ${PNOR_RO_COMBINED_PATH}/81e002ff.lid | cut -b 1-8)
      if [[ "${rwId}" != "${id}" ]]; then
        rm -rf "${PNOR_RW_COMBINED_PATH}"*
        rm -rf ${PNOR_PATCH_LOCATION}*
        obmc-flash-bios hostfwumount host-fw
        mkdir -p "${PNOR_RW_COMBINED_PATH}${id}"
      fi
      mkdir -p "${PNOR_PRSV_COMBINED_PATH}"
      roTarget="${PNOR_RO_COMBINED_PATH}"
      rwTarget="${PNOR_RW_COMBINED_PATH}${id}"
      prsvTarget="${PNOR_PRSV_COMBINED_PATH}"

  else
      return 0;
  fi

  if [ ! -d "${PNOR_ACTIVE_PATH}" ]; then
        mkdir -p "${PNOR_ACTIVE_PATH}"
  fi

  # If the RW or RO active links doesn't point to the version with
  # lowest priority, then remove the symlink and create new ones.
  if [[ $(readlink -f "${PNOR_RO_ACTIVE_PATH}") != ${roTarget}  ]]; then
    rm -f ${PNOR_RO_ACTIVE_PATH}
    rm -rf ${PNOR_PATCH_LOCATION}*
    ln -sfv ${roTarget} ${PNOR_RO_ACTIVE_PATH}
  fi

  if [[ $(readlink -f "${PNOR_RW_ACTIVE_PATH}") != ${rwTarget}  ]]; then
    rm -f ${PNOR_RW_ACTIVE_PATH}
    ln -sfv ${rwTarget} ${PNOR_RW_ACTIVE_PATH}
  fi

  if [[ $(readlink -f "${PNOR_PRSV_ACTIVE_PATH}") != ${prsvTarget} ]]; then
    rm -f ${PNOR_PRSV_ACTIVE_PATH}
    ln -sfv ${prsvTarget} ${PNOR_PRSV_ACTIVE_PATH}
  fi
}

mount_host_fw() {
    # The current eMMC image ends at offset 5377099264 (0x140800600) or after.
    # The hostfw partition is appended at the end, try to find it.
    endOfFile=5377099264

    # An ext4 filesystem has a magic number 0x53 0xef at offset 1080 and 1081
    # respectively. Check if it exists within 1MB (1048576 bytes). Ex output:
    # 140800e30  76 e9 e8 5e 00 00 ff ff  53 ef 01 00 01 00 00 00
    # Busybox truncates the printed offset to 8 digits so the actual output is:
    # 40800e30  76 e9 e8 5e 00 00 ff ff  53 ef 01 00 01 00 00 00
    mmcDev="/dev/mmcblk0"
    magicOffset=$(hexdump -C "${mmcDev}" -s $endOfFile -n 1048576 | grep "  53 ef")
    if [ -z "$magicOffset" ]; then
        return 0
    fi

    # Get the offset, this is in hex so prepend a '0x'. Ex: 0x40800a30
    magicOffset="0x${magicOffset%% *}"

    # Add the leading 1 digit back that busybox truncated (this converts the
    # output to decimal too). Ex: 0x140800a30 = 5377101360
    magicOffset=$(( magicOffset | 0x100000000 ))

    # The magic number is 8bytes from the beginning of the line, so substract
    # 1072 to get to the beginning of the partition since the magic number is
    # at location 1080.
    partitionOffset=$(( $magicOffset - 1072 ))

    mountTarget="/usr/share/host-fw/"
    mount -o ro,offset=${partitionOffset} "${mmcDev}" "${mountTarget}"
}

case "$1" in
  updatesymlinks)
    update_symlinks
    ;;
  mounthostfw)
    mount_host_fw
    ;;
  *)
    echo "Invalid argument"
    exit 1
    ;;
esac
rc=$?
if [ ${rc} -ne 0 ]; then
  echo "$0: error ${rc}"
  exit ${rc}
fi
